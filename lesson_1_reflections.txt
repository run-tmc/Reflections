How did viewing a diff between two versions of a file help you see the bug that was introduced?  The diff command significantly reduced the amount of code that had to be reviewed to discover the bug.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?  Easily accessing a file's version history will make it easier to use the diff commmand to discover why code performance has changed or find bugs with diff, too.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs versions automatically saved, like Google Docs does?  The pros of manually choosing when to create a commit are as follows: The commit can be established at logical points when a block of code has been updated (e.g. new features, correct coding error) which can be sucessfully run.  The cons of manually choosing when to create a commit are as follows: The commit can be lost if there is a system error.  The pros of auto-creating a commit are as follows: The commits have been made when unforseen system issue occur.  The cons of auto-creating a commit are as follows: too commits that my not exeute per a design.
Why do you think some version controls, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?  Git has been designed specifically for coding version control.  Since multiple files can be support a coding program, Git will log the commit states for all the files in a given repository.  
How can you use the commands git log and git diff to view the history of files? Use the git log command to display all the commit history in the current repository directory in the command line.  Use the down arrow to scroll through additional commits.  Commit ID can be copied and pasted from the git log to display changes in the commit using the git diff command.  When a single commit ID is used with the git diff command, all the changes are display.  The git diff command can be used with two commit IDs to get a summary of changes between the two commit states.  The insertion and deletion colors in green and red respectively can be reflect using the <<git config --global color.ui.auto>> on the command line.
How might using version control make you more confident to make changes that could break something?  With version control, bolder changes can be made to code without fear of losing previous code that worked.
Now that you have your workspace is set up, what do you want to try to using Git for?   I will use Git for my next Python coding project.